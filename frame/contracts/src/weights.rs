// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-03-20, STEPS: [10, ], REPEAT: 10, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/nuchain
// benchmark
// --chain=dev
// --steps=10
// --repeat=10
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template-div.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn update_schedule() -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(5_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			/ 4
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(90_761_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((2_808_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
			/ 4
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_178_000
			.saturating_add((168_517_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn instrument(c: u32, ) -> Weight {
		(21_989_000 as Weight)
			// Standard Error: 759_000
			.saturating_add((139_407_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn update_schedule() -> Weight {
		(35_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(390_265_000 as Weight)
			// Standard Error: 1_222_000
			.saturating_add((191_576_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 77_000
			.saturating_add((2_730_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			/ 4
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(250_617_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((9_360_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 15_000
			.saturating_add((2_706_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			/ 4
	}
	fn call(c: u32, ) -> Weight {
		(220_238_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((4_258_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			/ 4
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(354_258_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((6_293_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			/ 4
	}
	fn seal_caller(r: u32, ) -> Weight {
		(125_486_000 as Weight)
			// Standard Error: 1_359_000
			.saturating_add((321_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_address(r: u32, ) -> Weight {
		(137_361_000 as Weight)
			// Standard Error: 479_000
			.saturating_add((319_820_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(187_148_000 as Weight)
			// Standard Error: 2_056_000
			.saturating_add((310_151_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_balance(r: u32, ) -> Weight {
		(177_489_000 as Weight)
			// Standard Error: 1_523_000
			.saturating_add((688_614_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(127_768_000 as Weight)
			// Standard Error: 774_000
			.saturating_add((313_866_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(143_856_000 as Weight)
			// Standard Error: 873_000
			.saturating_add((312_942_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(179_067_000 as Weight)
			// Standard Error: 1_617_000
			.saturating_add((308_335_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(165_902_000 as Weight)
			// Standard Error: 1_500_000
			.saturating_add((699_941_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(161_417_000 as Weight)
			// Standard Error: 589_000
			.saturating_add((301_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_now(r: u32, ) -> Weight {
		(152_321_000 as Weight)
			// Standard Error: 852_000
			.saturating_add((314_942_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(153_940_000 as Weight)
			// Standard Error: 758_000
			.saturating_add((638_746_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_gas(r: u32, ) -> Weight {
		(137_520_000 as Weight)
			// Standard Error: 468_000
			.saturating_add((145_805_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_input(r: u32, ) -> Weight {
		(148_367_000 as Weight)
			// Standard Error: 5_818_000
			.saturating_add((12_600_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(153_898_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((350_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_return(r: u32, ) -> Weight {
		(148_600_000 as Weight)
			// Standard Error: 4_408_000
			.saturating_add((267_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(168_347_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((819_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(151_633_000 as Weight)
			// Standard Error: 2_225_000
			.saturating_add((124_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(275_962_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((9_833_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			/ 4
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(254_017_000 as Weight)
			// Standard Error: 6_067_000
			.saturating_add((170_583_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, _t: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_467_000
			.saturating_add((16_332_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 15_981_000
			.saturating_add((4_426_880_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
			/ 4
	}
	fn seal_random(r: u32, ) -> Weight {
		(140_749_000 as Weight)
			// Standard Error: 1_508_000
			.saturating_add((821_137_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(311_370_000 as Weight)
			// Standard Error: 3_844_000
			.saturating_add((1_148_386_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_546_275_000 as Weight)
			// Standard Error: 11_055_000
			.saturating_add((775_115_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 2_197_000
			.saturating_add((286_030_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
			/ 4
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(207_715_000 as Weight)
			// Standard Error: 2_465_000
			.saturating_add((863_829_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(3_549_362_000 as Weight)
			// Standard Error: 164_814_000
			.saturating_add((18_961_793_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(2_116_797_000 as Weight)
			// Standard Error: 1_888_000
			.saturating_add((81_234_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			/ 4
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 19_140_000
			.saturating_add((2_915_298_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(123_582_000 as Weight)
			// Standard Error: 4_190_000
			.saturating_add((1_195_030_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(832_226_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((171_456_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(281_367_000 as Weight)
			// Standard Error: 21_443_000
			.saturating_add((6_877_964_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 37_471_000
			.saturating_add((12_500_402_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(22_659_722_000 as Weight)
			// Standard Error: 8_592_000
			.saturating_add((388_472_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_701_280_000
			.saturating_add((9_181_256_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_087_000
			.saturating_add((55_292_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 1_160_000
			.saturating_add((82_949_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
			/ 4
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 99_806_000
			.saturating_add((26_125_293_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(15_669_318_000 as Weight)
			// Standard Error: 10_578_000
			.saturating_add((992_361_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_431_000
			.saturating_add((61_702_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 1_431_000
			.saturating_add((91_210_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 1_431_000
			.saturating_add((341_570_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
			/ 4
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(122_305_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((290_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(3_048_787_000 as Weight)
			// Standard Error: 804_000
			.saturating_add((510_232_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(126_745_000 as Weight)
			// Standard Error: 585_000
			.saturating_add((303_101_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(1_746_039_000 as Weight)
			// Standard Error: 1_233_000
			.saturating_add((376_968_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(131_923_000 as Weight)
			// Standard Error: 492_000
			.saturating_add((276_439_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(2_376_495_000 as Weight)
			// Standard Error: 834_000
			.saturating_add((171_028_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(152_944_000 as Weight)
			// Standard Error: 824_000
			.saturating_add((267_644_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(2_011_441_000 as Weight)
			// Standard Error: 818_000
			.saturating_add((170_905_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(27_283_000 as Weight)
			// Standard Error: 356_000
			.saturating_add((6_667_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(30_500_000 as Weight)
			// Standard Error: 1_369_000
			.saturating_add((202_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(29_317_000 as Weight)
			// Standard Error: 3_134_000
			.saturating_add((279_217_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_select(r: u32, ) -> Weight {
		(26_617_000 as Weight)
			// Standard Error: 231_000
			.saturating_add((21_333_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_if(r: u32, ) -> Weight {
		(26_617_000 as Weight)
			// Standard Error: 269_000
			.saturating_add((21_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br(r: u32, ) -> Weight {
		(26_650_000 as Weight)
			// Standard Error: 446_000
			.saturating_add((12_100_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(27_533_000 as Weight)
			// Standard Error: 1_695_000
			.saturating_add((34_500_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(27_467_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((26_133_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(55_177_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((178_000 as Weight).saturating_mul(e as Weight))
			/ 4
	}
	fn instr_call(r: u32, ) -> Weight {
		(28_150_000 as Weight)
			// Standard Error: 1_117_000
			.saturating_add((123_683_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(35_417_000 as Weight)
			// Standard Error: 5_138_000
			.saturating_add((281_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(348_768_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((6_850_000 as Weight).saturating_mul(p as Weight))
			/ 4
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(48_867_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((6_233_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(48_600_000 as Weight)
			// Standard Error: 230_000
			.saturating_add((7_967_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(48_383_000 as Weight)
			// Standard Error: 1_798_000
			.saturating_add((12_000_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(32_700_000 as Weight)
			// Standard Error: 303_000
			.saturating_add((11_517_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(32_850_000 as Weight)
			// Standard Error: 152_000
			.saturating_add((13_450_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(31_233_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((4_817_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(28_350_000 as Weight)
			// Standard Error: 9_201_000
			.saturating_add((2_713_017_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(26_717_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((10_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(28_333_000 as Weight)
			// Standard Error: 339_000
			.saturating_add((10_350_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(28_233_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((11_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(29_067_000 as Weight)
			// Standard Error: 299_000
			.saturating_add((9_767_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(27_567_000 as Weight)
			// Standard Error: 186_000
			.saturating_add((10_900_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(29_083_000 as Weight)
			// Standard Error: 416_000
			.saturating_add((11_517_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(30_100_000 as Weight)
			// Standard Error: 421_000
			.saturating_add((8_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(28_367_000 as Weight)
			// Standard Error: 211_000
			.saturating_add((14_300_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(28_933_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((13_850_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(28_283_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((14_567_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(28_650_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((14_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(29_117_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((13_383_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(29_017_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((12_667_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(28_083_000 as Weight)
			// Standard Error: 85_000
			.saturating_add((14_683_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(28_117_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((14_650_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(29_133_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((12_867_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(28_667_000 as Weight)
			// Standard Error: 463_000
			.saturating_add((13_217_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(28_717_000 as Weight)
			// Standard Error: 2_518_000
			.saturating_add((18_067_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(28_117_000 as Weight)
			// Standard Error: 241_000
			.saturating_add((13_883_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(29_667_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((12_317_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(29_083_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((20_600_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(28_883_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((18_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(27_400_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((21_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(28_050_000 as Weight)
			// Standard Error: 245_000
			.saturating_add((20_633_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(28_633_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((13_533_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(29_450_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((12_500_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(27_633_000 as Weight)
			// Standard Error: 583_000
			.saturating_add((16_417_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(28_883_000 as Weight)
			// Standard Error: 318_000
			.saturating_add((14_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(29_767_000 as Weight)
			// Standard Error: 333_000
			.saturating_add((14_567_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(28_983_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((13_617_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(29_433_000 as Weight)
			// Standard Error: 2_230_000
			.saturating_add((17_050_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(28_983_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((13_400_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(5_100_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			/ 4
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(90_761_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((2_808_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
			/ 4
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_178_000
			.saturating_add((168_517_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn instrument(c: u32, ) -> Weight {
		(21_989_000 as Weight)
			// Standard Error: 759_000
			.saturating_add((139_407_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn update_schedule() -> Weight {
		(35_100_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(390_265_000 as Weight)
			// Standard Error: 1_222_000
			.saturating_add((191_576_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 77_000
			.saturating_add((2_730_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			/ 4
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(250_617_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((9_360_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 15_000
			.saturating_add((2_706_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			/ 4
	}
	fn call(c: u32, ) -> Weight {
		(220_238_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((4_258_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			/ 4
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(354_258_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((6_293_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			/ 4
	}
	fn seal_caller(r: u32, ) -> Weight {
		(125_486_000 as Weight)
			// Standard Error: 1_359_000
			.saturating_add((321_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_address(r: u32, ) -> Weight {
		(137_361_000 as Weight)
			// Standard Error: 479_000
			.saturating_add((319_820_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(187_148_000 as Weight)
			// Standard Error: 2_056_000
			.saturating_add((310_151_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_balance(r: u32, ) -> Weight {
		(177_489_000 as Weight)
			// Standard Error: 1_523_000
			.saturating_add((688_614_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(127_768_000 as Weight)
			// Standard Error: 774_000
			.saturating_add((313_866_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(143_856_000 as Weight)
			// Standard Error: 873_000
			.saturating_add((312_942_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(179_067_000 as Weight)
			// Standard Error: 1_617_000
			.saturating_add((308_335_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(165_902_000 as Weight)
			// Standard Error: 1_500_000
			.saturating_add((699_941_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(161_417_000 as Weight)
			// Standard Error: 589_000
			.saturating_add((301_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_now(r: u32, ) -> Weight {
		(152_321_000 as Weight)
			// Standard Error: 852_000
			.saturating_add((314_942_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(153_940_000 as Weight)
			// Standard Error: 758_000
			.saturating_add((638_746_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_gas(r: u32, ) -> Weight {
		(137_520_000 as Weight)
			// Standard Error: 468_000
			.saturating_add((145_805_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_input(r: u32, ) -> Weight {
		(148_367_000 as Weight)
			// Standard Error: 5_818_000
			.saturating_add((12_600_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(153_898_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((350_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_return(r: u32, ) -> Weight {
		(148_600_000 as Weight)
			// Standard Error: 4_408_000
			.saturating_add((267_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(168_347_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((819_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(151_633_000 as Weight)
			// Standard Error: 2_225_000
			.saturating_add((124_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(275_962_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((9_833_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			/ 4
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(254_017_000 as Weight)
			// Standard Error: 6_067_000
			.saturating_add((170_583_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, _t: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_467_000
			.saturating_add((16_332_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 15_981_000
			.saturating_add((4_426_880_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
			/ 4
	}
	fn seal_random(r: u32, ) -> Weight {
		(140_749_000 as Weight)
			// Standard Error: 1_508_000
			.saturating_add((821_137_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(311_370_000 as Weight)
			// Standard Error: 3_844_000
			.saturating_add((1_148_386_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_546_275_000 as Weight)
			// Standard Error: 11_055_000
			.saturating_add((775_115_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 2_197_000
			.saturating_add((286_030_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
			/ 4
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(207_715_000 as Weight)
			// Standard Error: 2_465_000
			.saturating_add((863_829_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			/ 4
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(3_549_362_000 as Weight)
			// Standard Error: 164_814_000
			.saturating_add((18_961_793_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(2_116_797_000 as Weight)
			// Standard Error: 1_888_000
			.saturating_add((81_234_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			/ 4
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 19_140_000
			.saturating_add((2_915_298_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(123_582_000 as Weight)
			// Standard Error: 4_190_000
			.saturating_add((1_195_030_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(832_226_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((171_456_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			/ 4
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(281_367_000 as Weight)
			// Standard Error: 21_443_000
			.saturating_add((6_877_964_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 37_471_000
			.saturating_add((12_500_402_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(22_659_722_000 as Weight)
			// Standard Error: 8_592_000
			.saturating_add((388_472_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_701_280_000
			.saturating_add((9_181_256_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_087_000
			.saturating_add((55_292_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 1_160_000
			.saturating_add((82_949_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
			/ 4
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 99_806_000
			.saturating_add((26_125_293_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
			/ 4
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(15_669_318_000 as Weight)
			// Standard Error: 10_578_000
			.saturating_add((992_361_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_431_000
			.saturating_add((61_702_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 1_431_000
			.saturating_add((91_210_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 1_431_000
			.saturating_add((341_570_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
			/ 4
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(122_305_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((290_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(3_048_787_000 as Weight)
			// Standard Error: 804_000
			.saturating_add((510_232_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(126_745_000 as Weight)
			// Standard Error: 585_000
			.saturating_add((303_101_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(1_746_039_000 as Weight)
			// Standard Error: 1_233_000
			.saturating_add((376_968_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(131_923_000 as Weight)
			// Standard Error: 492_000
			.saturating_add((276_439_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(2_376_495_000 as Weight)
			// Standard Error: 834_000
			.saturating_add((171_028_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(152_944_000 as Weight)
			// Standard Error: 824_000
			.saturating_add((267_644_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(2_011_441_000 as Weight)
			// Standard Error: 818_000
			.saturating_add((170_905_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			/ 4
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(27_283_000 as Weight)
			// Standard Error: 356_000
			.saturating_add((6_667_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(30_500_000 as Weight)
			// Standard Error: 1_369_000
			.saturating_add((202_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(29_317_000 as Weight)
			// Standard Error: 3_134_000
			.saturating_add((279_217_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_select(r: u32, ) -> Weight {
		(26_617_000 as Weight)
			// Standard Error: 231_000
			.saturating_add((21_333_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_if(r: u32, ) -> Weight {
		(26_617_000 as Weight)
			// Standard Error: 269_000
			.saturating_add((21_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br(r: u32, ) -> Weight {
		(26_650_000 as Weight)
			// Standard Error: 446_000
			.saturating_add((12_100_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(27_533_000 as Weight)
			// Standard Error: 1_695_000
			.saturating_add((34_500_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(27_467_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((26_133_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(55_177_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((178_000 as Weight).saturating_mul(e as Weight))
			/ 4
	}
	fn instr_call(r: u32, ) -> Weight {
		(28_150_000 as Weight)
			// Standard Error: 1_117_000
			.saturating_add((123_683_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(35_417_000 as Weight)
			// Standard Error: 5_138_000
			.saturating_add((281_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(348_768_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((6_850_000 as Weight).saturating_mul(p as Weight))
			/ 4
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(48_867_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((6_233_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(48_600_000 as Weight)
			// Standard Error: 230_000
			.saturating_add((7_967_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(48_383_000 as Weight)
			// Standard Error: 1_798_000
			.saturating_add((12_000_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(32_700_000 as Weight)
			// Standard Error: 303_000
			.saturating_add((11_517_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(32_850_000 as Weight)
			// Standard Error: 152_000
			.saturating_add((13_450_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(31_233_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((4_817_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(28_350_000 as Weight)
			// Standard Error: 9_201_000
			.saturating_add((2_713_017_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(26_717_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((10_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(28_333_000 as Weight)
			// Standard Error: 339_000
			.saturating_add((10_350_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(28_233_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((11_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(29_067_000 as Weight)
			// Standard Error: 299_000
			.saturating_add((9_767_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(27_567_000 as Weight)
			// Standard Error: 186_000
			.saturating_add((10_900_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(29_083_000 as Weight)
			// Standard Error: 416_000
			.saturating_add((11_517_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(30_100_000 as Weight)
			// Standard Error: 421_000
			.saturating_add((8_983_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(28_367_000 as Weight)
			// Standard Error: 211_000
			.saturating_add((14_300_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(28_933_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((13_850_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(28_283_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((14_567_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(28_650_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((14_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(29_117_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((13_383_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(29_017_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((12_667_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(28_083_000 as Weight)
			// Standard Error: 85_000
			.saturating_add((14_683_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(28_117_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((14_650_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(29_133_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((12_867_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(28_667_000 as Weight)
			// Standard Error: 463_000
			.saturating_add((13_217_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(28_717_000 as Weight)
			// Standard Error: 2_518_000
			.saturating_add((18_067_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(28_117_000 as Weight)
			// Standard Error: 241_000
			.saturating_add((13_883_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(29_667_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((12_317_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(29_083_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((20_600_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(28_883_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((18_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(27_400_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((21_467_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(28_050_000 as Weight)
			// Standard Error: 245_000
			.saturating_add((20_633_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(28_633_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((13_533_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(29_450_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((12_500_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(27_633_000 as Weight)
			// Standard Error: 583_000
			.saturating_add((16_417_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(28_883_000 as Weight)
			// Standard Error: 318_000
			.saturating_add((14_167_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(29_767_000 as Weight)
			// Standard Error: 333_000
			.saturating_add((14_567_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(28_983_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((13_617_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(29_433_000 as Weight)
			// Standard Error: 2_230_000
			.saturating_add((17_050_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(28_983_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((13_400_000 as Weight).saturating_mul(r as Weight))
			/ 4
	}
}
